/* eslint-disable no-console */
import axios from 'axios';
import TwitchStreamer, { ITwitchStreamer } from '../../models/twitchStreamerModel';
import TwitchGame, { ITwitchGame } from '../../models/twitchGameModel';
import TwitchReport, { ITwitchReportFollows, ITwitchReportHighlights } from '../../models/twitchReportModel';
import bot from '../../utils/TelegramBot';

export const handleShowCommands = async (chatId: number) => {
    bot.sendMessage(chatId, `
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ 
/check_follows - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤
/check_games - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∏–≥—Ä
/get_latest_report - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç`,
    );
};

export const handleCheckStreamers = async (chatId: number) => {
    try {
        const streamers = await TwitchStreamer.find();
        const ids = streamers.map((s: ITwitchStreamer) => `user_id=${s.id}`);

        const response = await axios.get(`https://api.twitch.tv/helix/streams?${ids.join('&')}`, { // make a get request with streamers id
            headers: {
                Authorization: process.env.TWITCH_TOKEN,
                'client-id': process.env.TWITCH_CLIENT,
            },
        });

        const online: string[] = [];

        interface IStreamerData {
            user_login: string;
            user_name: string;
            game_name: string;
        }

        response.data.data.map((s: IStreamerData) => {
            // eslint-disable-next-line max-len
            online.push(`<strong><a href="https://twitch.tv/${s.user_login}">${s.user_name}</a></strong> –∏–≥—Ä–∞–µ—Ç –≤ <strong><a href="https://twitch.tv/directory/game/${s.game_name}">${s.game_name}</a></strong>`);
        });
        if (!online.length) return bot.sendMessage(chatId, '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å—Ç—Ä–∏–º–µ—Ä—ã –æ—Ñ—Ñ–ª–∞–π–Ω');

        bot.sendMessage(chatId, `–°–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–∏–º–µ—Ä—ã –æ–Ω–ª–∞–π–Ω:\n\n${online.join('\n')}`, {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
        });
    } catch (err: unknown) {
        if (err instanceof Error) {
            console.log(`[Telegram Bot]: ERROR: ${err.message}`);
        }
        return bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...');
    }
};

export const handleCheckGames = async (chatId: number) => {
    try {
        const games = await TwitchGame.find();
        const ids = games.map((g: ITwitchGame) => g.id);
        const getByIds = games.map((g: ITwitchGame) => `game_id=${g.id}`);

        const response = await axios.get(`https://api.twitch.tv/helix/streams?first=60&${getByIds.join('&')}`, {
            headers: {
                Authorization: process.env.TWITCH_TOKEN,
                'client-id': process.env.TWITCH_CLIENT,
            },
        });

        const highlights: string[] = [];
        const allowedLangs = ['en', 'ru'];
        const viewersRequired = 1000;

        interface IResponseData {
            game_name: string
            game_id: string;
            user_login: string;
            user_name: string;
            viewer_count: number;
            language: string;
        }

        response.data.data.map((s: IResponseData) => {
            if (!ids.includes(s.game_id)) return;
            if (allowedLangs.includes(s.language) && s.viewer_count >= viewersRequired) {
                highlights.push(
                    // eslint-disable-next-line max-len
                    `<strong><a href="https://twitch.tv/${s.user_login}">${s.user_name}</a></strong> –∏–≥—Ä–∞–µ—Ç –≤ <strong><a href="https://twitch.tv/directory/game/${s.game_name}">${s.game_name}</a></strong> —Å ${s.viewer_count} –∑—Ä–∏—Ç–µ–ª–µ–π`,
                );
            }
        });

        const message = highlights.length ? `–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–∏–º—ã –ø–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º –∏–≥—Ä–∞–º:\n\n${highlights.join('\n')}` : '–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç—Ä–∏–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!';
        bot.sendMessage(chatId, message, {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
        });
    } catch (err: unknown) {
        if (err instanceof Error) {
            console.log(`[Telegram Bot]: Error: ${err.message}`);
        }
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...');
    }
};

export const handleGetReport = async (chatId: number) => {
    const report = await TwitchReport.findOne().sort('-timestamp');
    if (!report) return bot.sendMessage(chatId, '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞');

    const highlights: string[] = [];
    report.highlights.map((h: ITwitchReportHighlights) => {
        // eslint-disable-next-line max-len
        highlights.push(`‚Ä¢ <strong><a href="https://twitch.tv/${h.userName}">${h.userName}</a></strong> –∏–≥—Ä–∞–ª –≤ <strong><a href="https://twitch.tv/directory/game/${h.gameName}">${h.gameName}</a></strong> —Å ${h.viewers} –∑—Ä–∏—Ç–µ–ª–µ–π`);
    });

    const follows: string[] = [];
    report.follows.map((f: ITwitchReportFollows) => {
        // eslint-disable-next-line max-len
        follows.push(`<strong><a href="https://twitch.tv/${f.userName}">${f.userName}</a></strong>\n‚Ä¢ ${f.games.map((game: { name: string, firstTime: boolean }) => `${game.name}${game.firstTime ? ' üÜï' : ''}${game.name === 'Games + Demos' ? ' üü®' : ''}`).join('\n‚Ä¢ ')}`);
    });

    bot.sendMessage(chatId, `
–û—Ç—á—ë—Ç –∑–∞ ${new Date(report.timestamp).toLocaleDateString()}

<strong>–í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ</strong>\n\n${highlights.length ? highlights.join('\n') : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

<strong>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å—Ç—Ä–∏–º–µ—Ä—ã</strong>\n\n${follows.join('\n\n')}
    `, {
        parse_mode: 'HTML',
        disable_web_page_preview: true,
    });
};
